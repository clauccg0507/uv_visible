import tensorflow as tf
import numpy as np

#Datos
longitud_onda=np.array([190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], dtype=float)
absorbancia0_2=np.array([3.417273998, 3.690074921, 3.628536224, 3.825445652, 3.999999523, 3.928619385, 3.994042397, 3.999999523, 3.840945721, 3.898296833, 3.999999523], dtype=float)
absorbancia0_5=np.array([3.699104786, 3.801232338, 3.999999523, 3.671196938, 3.963742733, 3.811205387, 3.987842083, 3.999999523, 3.999999523, 3.963247776, 3.999999523], dtype=float)
absorbancia1=np.array([3.54507494, 3.661262512, 3.927582264, 3.698320866, 3.974525452, 3.934635639, 3.993217468, 3.999999523, 3.841976643, 3.814021111, 3.999999523], dtype=float)
absorbancia2=np.array([3.707177639, 3.854127407, 3.999999523, 3.995221138, 3.999999523, 3.842171669, 3.989663124, 3.999999523, 3.84219408, 3.789210796, 3.999999523], dtype=float)
absorbancia3=np.array([3.349434376, 3.708992958, 3.821416855, 3.622106552, 3.967209816, 3.999999523, 3.998672009, 3.999999523, 3.999999046, 3.999999046, 3.999999046], dtype=float)
absorbancia4=np.array([3.304504395, 3.924089909, 3.899831295, 3.762094498, 3.982429504, 3.999999523, 3.997755051, 3.999999523, 3.840437412, 3.812704563, 3.999999523], dtype=float)
absorbancia5=np.array([3.510705471, 3.978807449, 3.794260979, 3.673560619, 3.976826668, 3.999999523, 3.999103546, 3.999905586, 3.999999523, 3.962069035, 3.999999523], dtype=float)

capa_entrada=tf.keras.layers.Dense(units=1, input_shape=[1])
capa_oculta_1 = tf.keras.layers.Dense(units=3, input_shape=[1])
capa_oculta_2 = tf.keras.layers.Dense(units=3)
capa_salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([capa_entrada])
modelo = tf.keras.Sequential([capa_oculta_1, capa_oculta_2, capa_salida])
modelo.compile(optimizer=tf.keras.optimizers.Adam(0.1), loss="mean_squared_error")

print("Comenzando entrenamiento...")
historial=modelo.fit(longitud_onda, absorbancia0_2, epochs=1000, verbose=False)
print("¡Modelo entrenado!")

print("Hagamos una predicción")
resultado = modelo.predict([201])
print("El resultado es"+str(resultado)+"AU")

print("Variables internas del modelo")
print(capa_entrada.get_weights())
print(capa_oculta_1.get_weights())
print(capa_oculta_2.get_weights())
print(capa_salida.get_weights())


import tensorflow as tf
import numpy as np

#Datos para longitud de onda de 190 nm
concentracion=np.array([0.2, 0.5, 1, 2, 3, 4, 5], dtype=float)
longitud_onda=np.array([190], dtype=float)
absorbancia=np.array([3.417273998, 3.699104786, 3.54507494, 3.707177639, 3.349434376, 3.304504395, 3.510705471], dtype=float)

capa_entrada=tf.keras.layers.Dense(units=1, input_shape=[1])
capa_oculta_1 = tf.keras.layers.Dense(units=3, input_shape=[1])
capa_oculta_2 = tf.keras.layers.Dense(units=3)
capa_salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([capa_entrada])
modelo = tf.keras.Sequential([capa_oculta_1, capa_oculta_2, capa_salida])
modelo.compile(optimizer=tf.keras.optimizers.Adam(0.1), loss="mean_squared_error")

print("Comenzando entrenamiento...")
historial=modelo.fit(absorbancia, concentracion, epochs=1000, verbose=False)
print("¡Modelo entrenado!")

print("Hagamos una predicción")
resultado = modelo.predict([3.41259050369263])
print("El resultado es"+str(resultado)+"ppm")

#La muestra problema, según lo hallado en esta predicción, debe ser aproximadamente de 2.67 ppm

print("Variables internas del modelo")
print(capa_entrada.get_weights())
print(capa_oculta_1.get_weights())
print(capa_oculta_2.get_weights())
print(capa_salida.get_weights())
